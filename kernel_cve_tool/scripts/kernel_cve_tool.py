import argparse
import logging as log
import os
import json
import sys
import re
import subprocess

def load_cvedata(dbpath: str) -> (dict, dict):
    with open(os.path.join(dbpath, 'data', 'kernel_cves.json'), 'r', encoding='UTF-8') as f:
        kernel_cves = json.load(f)
    with open(os.path.join(dbpath, 'data', 'stream_data.json'), 'r', encoding='UTF-8') as f:
        stream_data = json.load(f)
    return kernel_cves, stream_data

def extract_version() -> (int, int, int):
    VERSION = PATCHLEVEL = SUBLEVEL = None
    verpat = re.compile(r'VERSION\s*=\s*([0-9]+)')
    plpat = re.compile(r'PATCHLEVEL\s*=\s*([0-9]+)')
    subpat = re.compile(r'SUBLEVEL\s*=\s*([0-9]+)')
    with open('Makefile', 'r', encoding='UTF-8') as f:
        for line in f:
            if VERSION and PATCHLEVEL and SUBLEVEL:
                break
            m = re.match(verpat, line)
            if m is not None:
                VERSION = int(m.group(1))
                continue
            m = re.match(plpat, line)
            if m is not None:
                PATCHLEVEL = int(m.group(1))
                continue
            m = re.match(subpat, line)
            if m is not None:
                SUBLEVEL = int(m.group(1))
    return VERSION, PATCHLEVEL, SUBLEVEL


def runcmd(cmd) -> (bool, str):
    try:
        proc = subprocess.run(cmd, stdin=subprocess.DEVNULL,
                              capture_output=True, encoding='UTF-8')
        return True, proc.stdout
    except subprocess.CalledProcessError as e:
        return False, None


def main() -> int:
    parser = argparse.ArgumentParser()
    parser.add_argument('-P', '--database-path', help='path to CVE database repository', required=True)
    args = parser.parse_args()
    log.basicConfig(format="%(message)s", level=log.INFO)
    ok, output = runcmd(['git', 'symbolic-ref', '--short', 'HEAD'])
    if not ok:
        log.error("Cannot get current branch")
        return 1
    branch = output.split('\n')[0]
    log.info("Current branch: {}".format(branch))
    kernel_cves, stream_data = load_cvedata(args.database_path)
    ver, pl, sub = extract_version()
    stream = stream_data["{}.{}".format(ver, pl)]
    fixed = set()
    for i in range(1, sub+1):
        try:
            fixed.update(list(stream["{}.{}.{}".format(ver, pl, i)].keys()))
        except KeyError:
            pass
    unfixed = set(list(stream["outstanding"].keys()))
    i = sub + 1
    vbase = "{}.{}.".format(ver, pl)
    while vbase + str(i) in stream:
        unfixed.update(list(stream[vbase + str(i)]))
        i += 1
    log.debug("Fixed({}): {}".format(len(fixed), ','.join(sorted(fixed))))
    log.debug("Unfixed({}): {}".format(len(unfixed), ','.join(sorted(unfixed))))
    both = fixed & unfixed
    if len(both) > 0:
        print("Found in both fixed and unfixed: {}".format(','.join(sorted(both))))
    found = set()
    cherrypicks = dict()
    cphashes = dict()
    for cve in unfixed:
        hash = kernel_cves[cve]['fixes']
        if hash == "" or hash == "-":
            log.info("No commit for {}, skipping".format(cve))
            continue
        ok, output = runcmd(['git', 'log', '-n', '1', '--pretty=%s', hash])
        if not ok:
            log.warning("Could not find commit {} for {}".format(hash, cve))
            continue
        subject = output.split('\n')[0]
        if len(subject) == 0:
            log.warning("Null commit subject for hash {} for {}".format(hash, cve))
            continue
        ok, output = runcmd(['git', 'log', '-n', '1', '--grep={}'.format(hash), '--grep={}'.format(subject)])
        if ok and len(output) > 0:
            localhash = output.split('\n')[0].split()[0]
            log.info("Found {} for {}".format(localhash, cve))
            found.update([cve])
        else:
            cherrypicks[cve] = hash
            if hash in cphashes:
                cphashes[hash].update([cve])
            else:
                cphashes[hash] = {cve}
    fixed |= found
    unfixed -= found
    log.debug("Fixed({}): {}".format(len(fixed), ','.join(sorted(fixed))))
    log.debug("Unfixed({}): {}".format(len(unfixed), ','.join(sorted(unfixed))))
    with open("PATCHED-CVES", "w", encoding="UTF-8") as f:
        f.write('\n'.join(sorted(list(fixed))) + '\n')
    with open("cherry-picks.list", "w", encoding="UTF-8") as f:
        for hash in cphashes:
            print("{}:{}".format(hash, ' '.join(sorted(list(cphashes[hash])))), file=f)
    return 0


if __name__ == "__main__":
    try:
        ret = main()
        sys.exit(ret)
    except SystemExit:
        pass
    except Exception:
        import traceback
        traceback.print_exc(5)
        sys.exit(1)
